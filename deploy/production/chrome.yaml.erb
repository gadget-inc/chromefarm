---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: chrome-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/client-body-buffer-size: 2M
    nginx.ingress.kubernetes.io/proxy-body-size: 10M
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/send-timeout: "3600"
spec:
  tls:
    - secretName: chromefarm.superpro.io-production
      hosts:
        - chromefarm.superpro.io
  rules:
    - host: chromefarm.superpro.io
      http:
        paths:
          - backend:
              serviceName: chrome
              servicePort: 80
---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: chrome
  name: chrome
spec:
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 3000
  selector:
    service: chrome
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    service: chrome
  name: chrome
spec:
  replicas: 8
  template:
    metadata:
      creationTimestamp: null
      labels:
        service: chrome
    spec:
      containers:
        - name: chrome
          resources:
            requests:
              memory: "2Gi"
            limits:
              memory: "2.5Gi"
          env:
            - name: MAX_CONCURRENT_SESSIONS
              value: '8'
            - name: PREBOOT_CHROME
              value: 'true'
            - name: CONNECTION_TIMEOUT
              value: '300000' # 5 minutes in ms timeout, clients need to refresh their connection before 5 minutes is up
            - name: DEBUG
              value: 'browserless*'

            <% ["TOKEN"].each do |secret_env_var| %>
            - name: <%= secret_env_var %>
              valueFrom:
                secretKeyRef:
                  name: application-secrets
                  key: <%= secret_env_var %>
            <% end %>

          image: browserless/chrome:1.25.0-puppeteer-2.1.0
          ports:
            - containerPort: 3000
      restartPolicy: Always
